---
title: "Results"
format: 
  html:
    toc: true            # Adds a table of contents
    toc-depth: 5         # Sets TOC depth to 3 levels
    number-sections: FALSE # Enables numbered sections
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(collapse = T, cache = T)
```

```{r - load libraries}
#| include: false
#| echo: false

library(tidyverse)
library(viridis)
library(ggpubr)
library(gt)
#Models libraries
library(mgcv)
library(glmmTMB)

# library(gam)
# library(gamm4)
# library(nlme)

#Model check libraries
library(visreg)
library(DHARMa)
library(performance)
library(lsmeans)
library(emmeans)
library(multcomp)
library(multcompView)
library(MuMIn)
library(ggeffects)

# Load required packages
library(MASS)
```

```{r - load data}
#| echo: false
#| include: false

# Load Data ----------------------------------------------------------------

snapper = read_csv("data/snapper.csv") |> 
  mutate(Common = as.factor(Common),
         Location = as.factor(Location))
grouper = read_csv("data/grouper.csv") |> 
   mutate(Common = as.factor(Common),
         Location = as.factor(Location))# not including Nassau grouper
gs = read_csv("data/groupersnapper_pivot.csv") |> 
   mutate(Common = as.factor(Common),
         Location = as.factor(Location))#For occurrence analysis

### For Rugosity ###

#Only top grouper and snapper

snapper_abundance_r = read_csv("data/snapper_abundance_r.csv") |> 
   mutate(Common = as.factor(Common),
         Location = as.factor(Location))
grouper_abundance_r = read_csv("data/grouper_abundance_r.csv") |> 
   mutate(Common = as.factor(Common),
         Location = as.factor(Location))
snapper_occurrence_r = read_csv("data/snapper_occurrence_r.csv") |> 
   mutate(Common = as.factor(Common),
         Location = as.factor(Location))
grouper_occurrence_r = read_csv("data/grouper_occurrence_r.csv") |> 
   mutate(Common = as.factor(Common),
         Location = as.factor(Location))

### For P cover ###

pcover = read_csv("data/old/pcover.csv")
```

# Q1 Species Differences Abundance - MaxN

## Snapper

### Snappers model check

```{r - Model Comparison}
#| echo: TRUE
#| include: TRUE

glm_snap_MaxN.nb <- glmmTMB(MaxN ~ Common, data = snapper, family = nbinom2)

glmm_nb <- glmmTMB(MaxN ~ Common + (1 | Site), data = snapper, family = nbinom2)

glm_snap_MaxN.poi <- glmmTMB(MaxN ~ Common, family = poisson(link = "log"), data = snapper)

AICc(glm_snap_MaxN.nb, glm_snap_MaxN.poi, glmm_nb)
```

```{r - Model checks1}
#| echo: TRUE


check_model(glm_snap_MaxN.nb) 



```

**Selecting this model as the best fit:**

```{r - Model checks2}
check_model(glmm_nb) 

summary(glmm_nb)
car::Anova(glmm_nb, test = "Chisq")

```

```{r - Model remove}
#| echo: false
#| include: false

#nb model better than poisson
rm(glm_snap_MaxN.poi,glm_snap_MaxN.nb)

```

### MaxN Snapper Pairwise

```{r - Snapper Model Pairwise Comparisons}
#| echo: FALSE
#| include: TRUE


gg.snapper.MaxN = ggpredict(glmm_nb, terms = c("Common"),bias_correction = TRUE) |> 
  rename(Common = x, MaxN = predicted)
plot(ggpredict(glmm_nb, terms = c("Common"),bias_correction = TRUE))

em_snapper_MaxN = emmeans(glmm_nb, "Common")
pairwise_snapper = pairs(em_snapper_MaxN, simple = "Common") |> 
  as.data.frame()

pairwise_snapper <- pairwise_snapper %>%
  rename(
    Comparison = contrast,
    Estimate = estimate,
    SE = SE,
    df = df,
    z_ratio = z.ratio,
    p_value = p.value
  ) %>%
  mutate(
    p_value = signif(p_value, 4),
    Estimate = round(Estimate, 3),
    SE = round(SE, 2),
    z_ratio = round(z_ratio, 3)
  )

pairwise_snapper %>%
  gt() %>%
  tab_header(
    title = "Pairwise Comparisons of MaxN by Species (GLMM. SNAPPER)"
  ) %>%
  fmt_number(
    columns = c(Estimate, SE, z_ratio, p_value),
    decimals = 3
  ) %>%
  cols_label(
    Comparison = "Comparison",
    Estimate = "Difference",
    SE = "SE",
    df = "df",
    z_ratio = "z",
    p_value = "p-value"
  ) %>%
  tab_options(
    table.font.size = "small"
  ) %>%
  tab_spanner(
    label = "Statistics",
    columns = c(Estimate, SE, df, z_ratio, p_value)
  )



```

### MaxN Snapper Plot

```{r - Snapper Model Pairwise Comparisons Plot}
#| echo: FALSE

meanmodel_means_cld = cld(object = em_snapper_MaxN,
                          adjust = "bonf",
                          Letters = letters,
                          sort = F,
                          alpha = 0.05) |> 
  mutate(code = str_replace_all(.group, ' ', ''))

#Merging fitted models with unique groups code
custom_colors1 <- c("#FEE08B","#E69F00","#009E73", "#56B4E9","#0072B2")  # color blind friendly

gg.snapper.MaxN2 = left_join(gg.snapper.MaxN, meanmodel_means_cld, by = "Common")

snapper_MaxN = ggplot(gg.snapper.MaxN2, aes(Common, MaxN, fill = Common), colour = "black")+
  geom_col()+
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0, color = "black")+
  geom_text(aes(label = code, y = conf.high + 0.5), size = 5)+
  labs(x = "Snapper Species", y = "MaxN")+
  scale_fill_manual(values = custom_colors1) +  # Use the custom color palette
  # scale_x_continuous(breaks = c(0, 5, 10, 15, 20, 25, 30)) +
  theme(axis.text = element_text(size = 14, face = "bold", colour = "black"),
        axis.title = element_text(size = 16, face = "bold", colour = "black"),
        plot.title = element_text(size = 16, face = "bold", colour = "black"),
        panel.grid.major = element_blank(),
        axis.line = element_line(colour = "black"),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        legend.position = "none",
    axis.text.x = element_text(angle = 45, hjust = 1))
snapper_MaxN
```

## Grouper

### Poisson model

```{r - Model Comparison2}
#| echo: TRUE
#| include: TRUE

grouper$Common = as.factor(grouper$Common)


glm_grp_MaxN.poi <- glmmTMB(MaxN ~ Common , 
                        family = poisson(link = "log"), 
                        data = grouper)

glmm_grp_MaxN_poi <- glmmTMB(MaxN ~ Common + (1 | Site), 
                              family = poisson(link = "log"), 
                              data = grouper)

compare_performance(glm_grp_MaxN.poi,glmm_grp_MaxN_poi)

check_model(glm_grp_MaxN.poi) # Model diagnostics

summary(glm_grp_MaxN.poi)
car::Anova(glm_grp_MaxN.poi, test = "Chisq")


```

### MaxN Grouper Pairwise

```{r - Model grouper pairwise}
#| echo: FALSE
#| include: TRUE

gg.grouper.MaxN = ggpredict(glm_grp_MaxN.poi, terms = c("Common"))  %>% 
  rename(Common = x, MaxN = predicted)

plot(ggpredict(glm_grp_MaxN.poi, terms = c("Common"))) 

em_grouper_MaxN = emmeans(glm_grp_MaxN.poi, "Common")

pairwise_grouper = pairs(em_grouper_MaxN, simple = "Common") |> 
  as.data.frame()

pairwise_grouper <- pairwise_grouper %>%
  rename(
    Comparison = contrast,
    Estimate = estimate,
    SE = SE,
    df = df,
    z_ratio = z.ratio,
    p_value = p.value
  ) %>%
  mutate(
    p_value = signif(p_value, 4),
    Estimate = round(Estimate, 3),
    SE = round(SE, 2),
    z_ratio = round(z_ratio, 3)
  )

pairwise_grouper %>%
  gt() %>%
  tab_header(
    title = "Pairwise Comparisons of MaxN by Species ( GROUPER)"
  ) %>%
  fmt_number(
    columns = c(Estimate, SE, z_ratio, p_value),
    decimals = 3
  ) %>%
  cols_label(
    Comparison = "Comparison",
    Estimate = "Difference",
    SE = "SE",
    df = "df",
    z_ratio = "z",
    p_value = "p-value"
  ) %>%
  tab_options(
    table.font.size = "small"
  ) %>%
  tab_spanner(
    label = "Statistics",
    columns = c(Estimate, SE, df, z_ratio, p_value)
  )

```

### MaxN Grouper Plot

```{r - Grouper Model Pairwise Comparisons Plot}
#| echo: FALSE
#| include: TRUE

meanmodel_means_cld2 = cld(object = em_grouper_MaxN,
                           adjust = "bonf",
                           Letters = letters,
                           sort = F,
                           alpha = 0.05) |> 
  mutate(code = str_replace_all(.group, ' ', ''))


gg.grouper.MaxN2 = left_join(gg.grouper.MaxN, meanmodel_means_cld2, by = "Common")

g_colors1 <- c("#5AB4AC","#F46D43","#B5A1D3")

grouper_MaxN = ggplot(gg.grouper.MaxN2, aes(Common, MaxN, fill = Common), colour = "black") +
  geom_col() +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0, color = "black") +
  geom_text(aes(label = code, y = conf.high + 0.2), size = 5) +
  labs(x = "Grouper Species", y = "MaxN") +
  scale_fill_manual(values = g_colors1) +  # Use the custom color palette
  # scale_x_discrete(labels = c("Graysby", "Red Hind", "Coney")) +
  theme(
    axis.text = element_text(size = 14, face = "bold", colour = "black"),
    axis.title = element_text(size = 16, face = "bold", colour = "black"),
    plot.title = element_text(size = 16, face = "bold", colour = "black"),
    panel.grid.major = element_blank(),
    axis.line = element_line(colour = "black"),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    panel.background = element_blank(),
    legend.position = "none",
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

grouper_MaxN


```

## Panel Plot

```{r - snap_group_ggarrange}
#| echo: FALSE
#| include: TRUE

ggarrange(snapper_MaxN, grouper_MaxN,
          labels = c('a)','b)'),
          ncol = 2, vjust = 1, align = "h")

```

# Q2: Occurrence

## Snapper

### Model Selection

```{r - snapper occurence}
#| echo: TRUE
#| include: TRUE

snapper_oc <- gs |>
  filter(Common %in% c("Yellowtail", "Lane", "Mahogany", "Schoolmaster", "Mutton"))


# Fit GLM (binomial) for snapper occurrence
glm_snap_occur <- glm(PA ~ Common, family = binomial(link = "logit"), data = snapper_oc)
check_model(glm_snap_occur)   # Model diagnostics
summary(glm_snap_occur)
anova(glm_snap_occur, test = "Chisq")

```

### Occurrence Pairwise

```{r - snapper occurence pairwise}
#| echo: FALSE
#| include: TRUE

gg.snapper.occ = ggpredict(glm_snap_occur, terms = "Common") |>
  rename(Common = x, Occurrence = predicted)

plot(ggpredict(glm_snap_occur, terms = "Common"))

em_snapper_occ = emmeans(glm_snap_occur, "Common")

pairwise_snapper_occ = pairs(em_snapper_occ, simple = "Common") |> 
  as.data.frame()

pairwise_snapper_occ = pairwise_snapper_occ %>%
  rename(
    Comparison = contrast,
    Estimate = estimate,
    SE = SE,
    df = df,
    z_ratio = z.ratio,
    p_value = p.value
  ) %>%
  mutate(
    p_value = signif(p_value, 4),
    Estimate = round(Estimate, 3),
    SE = round(SE, 2),
    z_ratio = round(z_ratio, 3)
  )

pairwise_snapper_occ %>%
  gt() %>%
  tab_header(
    title = "Pairwise Comparisons of Occurence by Species (Snapper)"
  ) %>%
  fmt_number(
    columns = c(Estimate, SE, z_ratio, p_value),
    decimals = 3
  ) %>%
  cols_label(
    Comparison = "Comparison",
    Estimate = "Difference",
    SE = "SE",
    df = "df",
    z_ratio = "z",
    p_value = "p-value"
  ) %>%
  tab_options(
    table.font.size = "small"
  ) %>%
  tab_spanner(
    label = "Statistics",
    columns = c(Estimate, SE, df, z_ratio, p_value)
  )


```

### Occurrence Plot

```{r - snapper occurence plot}
#| echo: FALSE
#| include: TRUE

meanmodel_means_cld_occ <- cld(em_snapper_occ,
                               adjust = "bonf",
                               Letters = letters,
                               sort = FALSE,
                               alpha = 0.05) |>
  mutate(code = str_replace_all(.group, ' ', ''))

# Merge predicted values with CLD letters
gg.snapper.occ2 <- left_join(gg.snapper.occ, meanmodel_means_cld_occ, by = "Common")

# Create the Snapper Occurrence Plot
snapper_occ_plot <- ggplot(gg.snapper.occ2, aes(Common, Occurrence, fill = Common), colour = "black") +
  geom_col() +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0, color = "black") +
  geom_text(aes(label = code, y = conf.high + 0.05), size = 5) +
  labs(x = "Snapper Species", y = "Predicted Probability \n of Occurrence") +
  scale_fill_manual(values = custom_colors1) +
  theme(axis.text = element_text(size = 14, face = "bold", colour = "black"),
        axis.title = element_text(size = 16, face = "bold", colour = "black"),
        plot.title = element_text(size = 16, face = "bold", colour = "black"),
        panel.grid.major = element_blank(),
        axis.line = element_line(colour = "black"),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        legend.position = "none")

snapper_occ_plot

```

## Grouper

### Model Selection

```{r - grouper occurence}
#| echo: TRUE
#| include: TRUE

grouper_oc <- gs |>
  filter(Common %in% c("Graysby", "Red Hind", "Coney"))

# Fit GLM (binomial) for grouper occurrence
glm_grouper_occur <- glm(PA ~ Common, family = binomial(link = "logit"), data = grouper_oc)
check_model(glm_grouper_occur)
summary(glm_grouper_occur)
anova(glm_grouper_occur, test = "Chisq")

```

### Occurrence Pairwise

```{r - grouper occurence pairwise}
#| echo: FALSE
#| include: TRUE


gg.grouper.occ <- ggpredict(glm_grouper_occur, terms = "Common") |>
  rename(Common = x, Occurrence = predicted)

plot(ggpredict(glm_grouper_occur, terms = "Common"))

# Pairwise comparisons for grouper occurrence
em_grouper_occ = emmeans(glm_grouper_occur, "Common")

pairwise_grouper_occ = pairs(em_grouper_occ, simple = "Common") |> 
  as.data.frame()

pairwise_grouper_occ = pairwise_grouper_occ %>%
  rename(
    Comparison = contrast,
    Estimate = estimate,
    SE = SE,
    df = df,
    z_ratio = z.ratio,
    p_value = p.value
  ) %>%
  mutate(
    p_value = signif(p_value, 4),
    Estimate = round(Estimate, 3),
    SE = round(SE, 2),
    z_ratio = round(z_ratio, 3)
  )

pairwise_grouper_occ %>%
  gt() %>%
  tab_header(
    title = "Pairwise Comparisons of Occurence by Species (Grouper)"
  ) %>%
  fmt_number(
    columns = c(Estimate, SE, z_ratio, p_value),
    decimals = 3
  ) %>%
  cols_label(
    Comparison = "Comparison",
    Estimate = "Difference",
    SE = "SE",
    df = "df",
    z_ratio = "z",
    p_value = "p-value"
  ) %>%
  tab_options(
    table.font.size = "small"
  ) %>%
  tab_spanner(
    label = "Statistics",
    columns = c(Estimate, SE, df, z_ratio, p_value)
  )

```

### Occurrence Plot

```{r - grouper occurence plot}
#| echo: FALSE
#| include: TRUE


meanmodel_means_cld_occ_grp <- cld(em_grouper_occ,
                                   adjust = "bonf",
                                   Letters = letters,
                                   sort = FALSE,
                                   alpha = 0.05) |>
  mutate(code = str_replace_all(.group, ' ', ''))

# Merge predicted values with CLD letters
gg.grouper.occ2 <- left_join(gg.grouper.occ, meanmodel_means_cld_occ_grp, by = "Common")

# Create the Grouper Occurrence Plot
grouper_occ_plot <- ggplot(gg.grouper.occ2, aes(Common, Occurrence, fill = Common), colour = "black") +
  geom_col() +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0, color = "black") +
  geom_text(aes(label = code, y = conf.high + 0.05), size = 5) +
  labs(x = "Grouper Species", y = "Predicted Probability \n of Occurrence") +
  scale_fill_manual(values = g_colors1) +
  theme(axis.text = element_text(size = 14, face = "bold", colour = "black"),
        axis.title = element_text(size = 16, face = "bold", colour = "black"),
        plot.title = element_text(size = 16, face = "bold", colour = "black"),
        panel.grid.major = element_blank(),
        axis.line = element_line(colour = "black"),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        legend.position = "none")

grouper_occ_plot

```

## Panel Plot

```{r - snap_group_ggarrange2}
#| echo: FALSE
#| include: TRUE


ggarrange(snapper_occ_plot, grouper_occ_plot,
          labels = c('a)', 'b)'),
          ncol = 1, vjust = 1, align = "v")

```

## Occurence by Location

### Snapper

```{r - snapper occurence by location}
#| echo: TRUE
#| include: TRUE

# Fit a GLM including Location as an interaction
glm_snap_occur_loc <- glm(PA ~ Common * Location, 
                          family = binomial(link = "logit"), 
                          data = snapper_oc)

summary(glm_snap_occur_loc)

check_model(glm_snap_occur_loc)

anova(glm_snap_occur_loc, test = "Chisq")

```

### Snapper Occurrence by Location Pairwise

```{r - snapper occurence by location pairwise}
#| echo: FALSE
#| include: TRUE

gg.snapper.occ_loc <- ggpredict(glm_snap_occur_loc, terms = c("Common", "Location")) |>
  rename(Common = x, Occurrence = predicted, Location = group)

plot(ggpredict(glm_snap_occur_loc, terms = c("Common", "Location")))

em_snap_occur_loc <- emmeans(glm_snap_occur_loc, ~ Common | Location)



# Common
pairwise_snapper_occloc = pairs(em_snap_occur_loc, simple = "Common") |>
  as.data.frame() %>%
  rename(
    Comparison = contrast,
    Estimate = estimate,
    SE = SE,
    df = df,
    z_ratio = z.ratio,
    p_value = p.value
  ) %>%
  mutate(
    Group = "Common",  # add a column so we can tell them apart later
    p_value = signif(p_value, 4),
    Estimate = round(Estimate, 3),
    SE = round(SE, 2),
    z_ratio = round(z_ratio, 3)
  )

# Location
pairwise_snapper_lococc = pairs(em_snap_occur_loc, simple = "Location") |>
  as.data.frame() %>%
  rename(
    Comparison = contrast,
    Estimate = estimate,
    SE = SE,
    df = df,
    z_ratio = z.ratio,
    p_value = p.value
  ) %>%
  mutate(
    Group = "Location", # again, add a group label
    p_value = signif(p_value, 4),
    Estimate = round(Estimate, 3),
    SE = round(SE, 2),
    z_ratio = round(z_ratio, 3)
  )
pairwise_combined = bind_rows(pairwise_snapper_occloc, pairwise_snapper_lococc)

pairwise_combined %>%
  gt(groupname_col = "Group") %>%  # <-- this will automatically group by "Common" and "Location"
  tab_header(
    title = "Pairwise Comparisons of Snapper Occurrence"
  ) %>%
  fmt_number(
    columns = c(Estimate, SE, z_ratio, p_value),
    decimals = 3
  ) %>%
  cols_label(
    Comparison = "Comparison",
    Estimate = "Difference",
    SE = "SE",
    df = "df",
    z_ratio = "z",
    p_value = "p-value"
  ) %>%
  tab_options(
    table.font.size = "small"
  ) %>%
  tab_spanner(
    label = "Statistics",
    columns = c(Estimate, SE, df, z_ratio, p_value)
  )



```

### Snapper Occurrence by Location Plot

```{r - snapper occurence by location plot}
#| echo: FALSE
#| include: TRUE

# Get compact letter displays for significance groups
cld_snap_occur_loc <- cld(em_snap_occur_loc,
                          adjust = "bonf",
                          Letters = letters,
                          sort = FALSE,
                          alpha = 0.05) |>
  mutate(code = str_replace_all(.group, ' ', ''))

# Merge the CLD letters with the predicted values
gg.snapper.occ_loc2 <- left_join(gg.snapper.occ_loc, cld_snap_occur_loc, 
                                 by = c("Common", "Location"))


gg.snapper.occ_loc2 = gg.snapper.occ_loc2 |> 
  mutate(Location = case_when(Location == "M" ~ "Maguey",Location == "T" ~ "Tampico", TRUE ~ Location),
         code = case_when(Location == "Tampico" & Common == "Yellowtail" ~ "*", TRUE ~ code)) |> 
  drop_na()

# Create the Snapper Occurrence Plot by Location
snapper_occ_loc_plot <- ggplot(gg.snapper.occ_loc2, aes(Common, Occurrence, fill = Common), colour = "black") +
  geom_col() +
  geom_errorbar(data = subset(gg.snapper.occ_loc2, !(Common == "Yellowtail" & Location == "Tampico")),
                aes(ymin = conf.low, ymax = conf.high),
                width = 0,
                color = "black") +
  geom_text(aes(label = code, y = conf.high + 0.05), size = 5) +
  scale_fill_manual(values = custom_colors1) +
  facet_wrap(~ Location) +
  labs(x = "Snapper Species", y = "Predicted Probability \n of Occurrence") +
  theme(axis.text = element_text(size = 14, face = "bold", colour = "black"),
        axis.title = element_text(size = 16, face = "bold", colour = "black"),
        plot.title = element_text(size = 16, face = "bold", colour = "black"),
        panel.grid.major = element_blank(),
        axis.line = element_line(colour = "black"),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        legend.position = "none",
        strip.text = element_text(size = 12, face = "bold", colour = "black"),
        axis.text.x = element_text(angle = 45, hjust = 1))

snapper_occ_loc_plot

```

### Grouper

#### Model Selection

```{r - grouper occurence by location}
#| echo: TRUE
#| include: TRUE

# Fit a GLM including Location as an interaction
glm_grouper_occur_loc <- glm(PA ~ Common * Location, 
                             family = binomial(link = "logit"), 
                             data = grouper_oc)

check_model(glm_grouper_occur_loc) # Model diagnostics
#plot(glm_grouper_occur_loc)
summary(glm_grouper_occur_loc)
anova(glm_grouper_occur_loc, test = "Chisq")


```

#### Grouper Occurrence by Location Pairwise

```{r - grouper occurence by location pairwise}
#| echo: FALSE
#| include: TRUE


# Generate predictions
gg.grouper.occ_loc <- ggpredict(glm_grouper_occur_loc, terms = c("Common", "Location"))|>
  rename(Common = x, Occurrence = predicted, Location = group)

plot(ggpredict(glm_grouper_occur_loc, terms = c("Common", "Location")))

# Pairwise comparisons within each Location
em_grouper_occur_loc <- emmeans(glm_grouper_occur_loc, ~ Common | Location)

# Common comparisons (within Location)
pairwise_grouper_occloc_common <- pairs(em_grouper_occur_loc, simple = "Common") |>
  as.data.frame() %>%
  rename(
    Comparison = contrast,
    Estimate = estimate,
    SE = SE,
    df = df,
    z_ratio = z.ratio,
    p_value = p.value
  ) %>%
  mutate(
    Group = "Common (within Location)",
    p_value = signif(p_value, 4),
    Estimate = round(Estimate, 3),
    SE = round(SE, 2),
    z_ratio = round(z_ratio, 3)
  )

# Location comparisons (within Common)
pairwise_grouper_occloc_loc <- pairs(em_grouper_occur_loc, simple = "Location") |>
  as.data.frame() %>%
  rename(
    Comparison = contrast,
    Estimate = estimate,
    SE = SE,
    df = df,
    z_ratio = z.ratio,
    p_value = p.value
  ) %>%
  mutate(
    Group = "Location (within Common)",
    p_value = signif(p_value, 4),
    Estimate = round(Estimate, 3),
    SE = round(SE, 2),
    z_ratio = round(z_ratio, 3)
  )

# Combine both sets of pairwise comparisons
pairwise_grouper_combined <- bind_rows(pairwise_grouper_occloc_common, pairwise_grouper_occloc_loc)

# Create gt summary table
pairwise_grouper_combined %>%
  gt(groupname_col = "Group") %>%
  tab_header(
    title = "Pairwise Comparisons of Grouper Occurrence"
  ) %>%
  fmt_number(
    columns = c(Estimate, SE, z_ratio, p_value),
    decimals = 3
  ) %>%
  cols_label(
    Comparison = "Comparison",
    Estimate = "Difference",
    SE = "SE",
    df = "df",
    z_ratio = "z",
    p_value = "p-value"
  ) %>%
  tab_options(
    table.font.size = "small"
  ) %>%
  tab_spanner(
    label = "Statistics",
    columns = c(Estimate, SE, df, z_ratio, p_value)
  )



```

#### Grouper Occurrence by Location Plot

```{r - grouper occurence by location plot}
#| echo: FALSE
#| include: TRUE

# Obtain CLD letters for grouper
cld_grouper_occur_loc <- cld(em_grouper_occur_loc,
                             adjust = "bonf",
                             Letters = letters,
                             sort = FALSE,
                             alpha = 0.05) |>
  mutate(code = str_replace_all(.group, ' ', ''))

# Merge CLD letters with predictions
gg.grouper.occ_loc2 <- left_join(gg.grouper.occ_loc, cld_grouper_occur_loc, 
                                 by = c("Common", "Location"))


gg.grouper.occ_loc2 = gg.grouper.occ_loc2 |> 
  mutate(Location = case_when(Location == "M" ~ "Maguey",Location == "T" ~ "Tampico", TRUE ~ Location)) |> 
  drop_na()

# Create the Grouper Occurrence Plot by Location
grouper_occ_loc_plot <- ggplot(gg.grouper.occ_loc2, aes(Common, Occurrence, fill = Common), colour = "black") +
  geom_col() +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0, color = "black") +
  geom_text(aes(label = code, y = conf.high + 0.05), size = 5) +
  labs(x = "Grouper Species", y = "Predicted Probability \n of Occurrence") +
  scale_fill_manual(values = g_colors1) +
  facet_wrap(~ Location) +
  theme(axis.text = element_text(size = 14, face = "bold", colour = "black"),
        axis.title = element_text(size = 16, face = "bold", colour = "black"),
        plot.title = element_text(size = 16, face = "bold", colour = "black"),
        panel.grid.major = element_blank(),
        axis.line = element_line(colour = "black"),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        legend.position = "none",
        strip.text = element_text(size = 12, face = "bold", colour = "black"))
grouper_occ_loc_plot



```

## Panel Plot

```{r - snap_group_ggarrange4}
#| echo: FALSE
#| include: TRUE

# Optionally, combine and save the plots
ggarrange(snapper_occ_loc_plot, grouper_occ_loc_plot,
          labels = c('a)', 'b)'),
          ncol = 1, vjust = 1, align = "v")

```

# Rugosity Analysis

## Abundance by Rugosity

### Snapper Abundance

```{r - snap abundance rugosity}
#| echo: TRUE
#| include: TRUE

snapper_abundance_r$Common = as.factor(snapper_abundance_r$Common)

#Location was not necessary for the model after dredging

snapp_maxn_nb <- glmmTMB(MaxN ~ Avg_rugosity + Common  + (1 | Site), family = nbinom2,data = snapper_abundance_r)

car::Anova(snapp_maxn_nb) 

```

```{r snap abun rugosity pred}
#| echo: FALSE
#| include: TRUE
snapp_maxn_commonpreds <- ggpredict(snapp_maxn_nb, terms = c("Common")) %>% 
  rename(Common = x, MaxN = predicted) 

plot(ggpredict(snapp_maxn_nb, terms = c("Common")))

em_snapp_maxn <- emmeans(snapp_maxn_nb, ~ Common)
pairs(em_snapp_maxn, simple = "Common")

cld_snapp_maxn <- cld(em_snapp_maxn, 
                      Letters = letters,
                      adjust = "bonf", 
                      sort = FALSE, 
                      alpha = 0.05) |>
  mutate(code = str_replace_all(.group, ' ', ''))

gg.snapp_maxn = left_join(snapp_maxn_commonpreds, cld_snapp_maxn, by = c("Common"))

snappcommon_pred = ggplot(gg.snapp_maxn, aes(x = Common, y = MaxN, fill = Common)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_text(aes(label = code), vjust = -0.5, size = 3) +
  labs(title = "Snapper Abundance (MaxN) by Species",
       x = "Species",
       y = "MaxN") +
  scale_fill_manual(values = custom_colors1[c(1, 4)])+
  theme_classic() +
  theme(legend.position = "none")


snapp_maxn_rugopreds = ggpredict(snapp_maxn_nb, terms = c("Avg_rugosity [1:2.5 by = 0.05]"))

snaprugo_pred = ggplot(snapp_maxn_rugopreds, aes(x = x, y = predicted)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#FC8D62", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Snapper Abundance (MaxN) by Rugosity",
       x = "Rugosity",
       y = "MaxN")

ggarrange(snappcommon_pred, snaprugo_pred,
          labels = c('a)', 'b)'),
          ncol = 2, vjust = 1, align = "v")

```

### Grouper Abundance

I had to switch to compois as there was some underdispersion. This made it a lot better. Then I dredged. The top two models were all the terms and without location. With all the terms rugosity had a minimal effect. Without location rugosity had a larger effect so I went with that since that is the focus of this section.

```{r - Grouper abundance rugosity}
#| echo: TRUE
#| include: TRUE

grouper_abundance_r$Common = as.factor(grouper_abundance_r$Common)

grouper_maxn_pois_r = glmmTMB(MaxN ~ Avg_rugosity  + Common  + (1 | Site), family = compois(), data = grouper_abundance_r)

summary(grouper_maxn_pois_r)

car::Anova(grouper_maxn_pois_r)
```

```{r grouper abun rugosity pred}
#| echo: FALSE
#| include: TRUE

grouper_maxn_preds_r <- ggpredict(grouper_maxn_pois_r, terms = c("Common")) %>% 
  rename(Common = x, MaxN = predicted)

em_grouper_maxn_r <- emmeans(grouper_maxn_pois_r, ~ Common)
pairs(em_grouper_maxn_r, simple = "Common")

cld_grouper_maxn_r <- cld(em_grouper_maxn_r, 
                        Letters = letters,
                        adjust = "bonf", 
                        sort = FALSE, 
                        alpha = 0.05) |>
  mutate(code = str_replace_all(.group, ' ', ''))
gg.grouper_maxn_r = left_join(grouper_maxn_preds_r, cld_grouper_maxn_r, by = c("Common"))

groupercommon_pred = ggplot(gg.grouper_maxn_r, aes(x = Common, y = MaxN, fill = Common)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_text(aes(label = code), vjust = -0.5, size = 3) +
  labs(title = "Grouper Abundance (MaxN) by Species",
       x = "Species",
       y = "MaxN") +
  scale_fill_manual(values = g_colors1[c(1, 2, 3)])+
  theme_classic() +
  theme(legend.position = "none")


grouper_maxn_rugopreds = ggpredict(grouper_maxn_pois_r, terms = c("Avg_rugosity [1:2.5 by = 0.05]"))

grouper_rugo_pred = ggplot(grouper_maxn_rugopreds, aes(x = x, y = predicted)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#FC8D62", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Grouper Abundance (MaxN) by Rugosity",
       x = "Rugosity",
       y = "MaxN")


ggarrange(groupercommon_pred, grouper_rugo_pred,
          labels = c('a)', 'b)'),
          ncol = 2, vjust = 1, align = "v")

```

## Occurrence by Rugosity

### Snapper Occurrence

```{r - snapper occurrence rugosity}
#| echo: TRUE
#| include: TRUE

snapper_occurrence_r$Common = as.factor(snapper_occurrence_r$Common)
snapp_occur_binom = glmmTMB(PA ~ Avg_rugosity  + Common  + (1 | Site), family = binomial, data = snapper_occurrence_r)

summary(snapp_occur_binom)

car::Anova(snapp_occur_binom)

```

```{r snap occur rugosity pred}
#| echo: FALSE
#| include: TRUE

snapp_paoccur_preds = ggpredict(snapp_occur_binom, terms = c("Common")) %>% 
  rename(Common = x, Occurrence = predicted)

plot(ggpredict(snapp_occur_binom, terms = c("Common")))

em_snapp_paoccur = emmeans(snapp_occur_binom, ~ Common)
pairs(em_snapp_paoccur, simple = "Common")

cld_snapp_paoccur = cld(em_snapp_paoccur, 
                      Letters = letters,
                      adjust = "bonf", 
                      sort = FALSE, 
                      alpha = 0.05) |>
  mutate(code = str_replace_all(.group, ' ', ''))

gg.snapp_paoccur = left_join(snapp_paoccur_preds, cld_snapp_paoccur, by = c("Common"))

snappcommon_paoccur = ggplot(gg.snapp_paoccur, aes(x = Common, y = Occurrence, fill = Common)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_text(aes(label = code), vjust = -0.5, size = 3) +
  labs(title = "Snapper Occurrence by Species",
       x = "Species",
       y = "Occurrence") +
  scale_fill_manual(values = custom_colors1[c(1, 4)])+
  theme_classic() +
  theme(legend.position = "none")


snapp_parugopreds = ggpredict(snapp_occur_binom, terms = c("Avg_rugosity [1:2.5 by = 0.05]"))

snap_pa_rugo_pred = ggplot(snapp_parugopreds, aes(x = x, y = predicted)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#FC8D62", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Snapper Occurrence by Rugosity",
       x = "Rugosity",
       y = "Occurrence")


ggarrange(snappcommon_paoccur, snap_pa_rugo_pred,
          labels = c('a)', 'b)'),
          ncol = 2, vjust = 1, align = "v")

test3 = as.data.frame(gg.snapp_paoccur)
test3
test4 = as.data.frame(snapp_parugopreds)
test4

test5 = ggpredict(snapp_occur_binom, terms = c("Avg_rugosity [1:2.5 by = 0.05]", "Common")) |>
  rename(Rugosity = x, Occurrence = predicted, Common = group)

ggplot(test5, aes(x = Rugosity, y = Occurrence, color = Common, fill = Common)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
  geom_line(linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Grouper Occurrence by Rugosity",
       x = "Rugosity",
       y = "Probability of Occurrence")


```

### Grouper Occurrence

```{r - grouper occurrence rugosity}
#| echo: TRUE
#| include: TRUE

grouper_occurrence_r$Common = as.factor(grouper_occurrence_r$Common)
grouper_occur_binom = glmmTMB(PA ~ Avg_rugosity + Common  + (1 | Site), family = binomial, data = grouper_occurrence_r)
summary(grouper_occur_binom)
car::Anova(grouper_occur_binom)
```

```{r grouper occur rugosity pred}
#| echo: FALSE
#| include: TRUE

grouper_paoccur_preds = ggpredict(grouper_occur_binom, terms = c("Common")) %>% 
  rename(Common = x, Occurrence = predicted)

plot(ggpredict(grouper_occur_binom, terms = c("Common")))

em_grouper_paoccur = emmeans(grouper_occur_binom, ~ Common)
pairs(em_grouper_paoccur, simple = "Common")

cld_grouper_paoccur = cld(em_grouper_paoccur, 
                      Letters = letters,
                      adjust = "bonf", 
                      sort = FALSE, 
                      alpha = 0.05) |>
  mutate(code = str_replace_all(.group, ' ', ''))

gg.grouper_paoccur = left_join(grouper_paoccur_preds, cld_grouper_paoccur, by = c("Common"))

groupercommon_paoccur = ggplot(gg.grouper_paoccur, aes(x = Common, y = Occurrence, fill = Common)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_text(aes(label = code), vjust = -0.5, size = 3) +
  labs(title = "Grouper Occurrence by Species",
       x = "Species",
       y = "Occurrence") +
  scale_fill_manual(values = g_colors1[c(1, 2, 3)])+
  theme_classic() +
  theme(legend.position = "none")


grouper_parugopreds = ggpredict(grouper_occur_binom, terms = c("Avg_rugosity [1:2.5 by = 0.05]"))

grouper_pa_rugo_pred = ggplot(grouper_parugopreds, aes(x = x, y = predicted)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#FC8D62", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Grouper Occurrence by Rugosity",
       x = "Rugosity",
       y = "Occurrence")

grouper_parugopreds = ggpredict(grouper_occur_binom, terms = c("Avg_rugosity [1:2.5 by = 0.05]")) |> 
  rename(Rugosity = x, Occurrence = predicted)


ggarrange(groupercommon_paoccur, grouper_pa_rugo_pred,
          labels = c('a)', 'b)'),
          ncol = 2, vjust = 1, align = "v")

test = as.data.frame(gg.grouper_paoccur)

test2 = as.data.frame(grouper_parugopreds)


test3 = ggpredict(grouper_occur_binom, terms = c("Avg_rugosity [1:2.5 by = 0.05]", "Common")) |>
  rename(Rugosity = x, Occurrence = predicted, Common = group)

ggplot(test3, aes(x = Rugosity, y = Occurrence, color = Common, fill = Common)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
  geom_line(linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Grouper Occurrence by Rugosity",
       x = "Rugosity",
       y = "Probability of Occurrence")
```

# %Cover & Seascape Metrics

Lots of issues with this. Only showing grouper abundance, specifically Graysby

```{r - cover seascape metrics data}
#| echo: FALSE
#| include: FALSE

grouper_abundance_r = read_csv("data/grouper_abundance_r.csv") |> 
  dplyr::select(-SitePlot) |> 
  rename(SitePlot = SitePlotNew) 

grouper_occurrence_r = read_csv("data/grouper_occurrence_r.csv") |> 
  dplyr::select(-SitePlot) |> 
  rename(SitePlot = SitePlotNew)

snapper_abundance_r = read_csv("data/snapper_abundance_r.csv") |> 
  dplyr::select(-SitePlot) |> 
  rename(SitePlot = SitePlotNew)

snapper_occurrence_r = read_csv("data/snapper_occurrence_r.csv") |> 
  dplyr::select(-SitePlot) |> 
  rename(SitePlot = SitePlotNew)

pcover = read_csv("data/old/pcover.csv") |> 
  mutate(Pcover = Pcover*100,
         Plot = str_pad(Plot, width = 2, side = "left", pad = "0"),
         Site = str_pad(Site, width = 2, side = "left", pad = "0")) |>
  unite("SitePlot", Location, Site, Plot, sep = "", remove = FALSE) |> 
  filter(Category %in% c("coral", "gorgonian", "algae", "sponge","sand-rubble"),
         Period == "baseline") |> 
  dplyr::select(-Period, -Year,-Location,-Site,-Plot) 

lsmetrics = read_csv("data/lsmetrics.csv")

dfgrouperA = left_join(grouper_abundance_r, pcover, by = c("SitePlot")) 
dfgrouperO = left_join(grouper_occurrence_r, pcover, by = c("SitePlot"))
dfsnapperA = left_join(snapper_abundance_r, pcover, by = c("SitePlot"))
dfsnapperO = left_join(snapper_occurrence_r, pcover, by = c("SitePlot"))

dft_widegrouperA = dfgrouperA |> 
  pivot_wider(
    names_from = Category,
    values_from = Pcover
  ) |> 
  dplyr::select(-14) |> 
  drop_na() |> 
  rename(
    sand = "sand-rubble") |> 
  left_join(lsmetrics, by = c("SitePlot"))

dft_widegrouperO = dfgrouperO |> 
  pivot_wider(
    names_from = Category,
    values_from = Pcover
  ) |> 
  dplyr::select(-14) |> 
  drop_na() |> 
  rename(
    sand = "sand-rubble") |> 
  left_join(lsmetrics, by = c("SitePlot"))

dft_widesnapperA = dfsnapperA |> 
  pivot_wider(
    names_from = Category,
    values_from = Pcover
  ) |> 
  dplyr::select(-14) |> 
  drop_na() |> 
  rename(
    sand = "sand-rubble") |> 
  left_join(lsmetrics, by = c("SitePlot"))

dft_widesnapperO = dfsnapperO |>
  pivot_wider(
    names_from = Category,
    values_from = Pcover
  ) |> 
  dplyr::select(-14) |> 
  drop_na() |> 
  rename(
    sand = "sand-rubble") |> 
  left_join(lsmetrics, by = c("SitePlot"))

df_gray_A = dft_widegrouperA |> 
  filter(Common == "Graysby") 

df_red_A = dft_widegrouperA |> 
  filter(Common == "Red Hind")

df_gray_O = dft_widegrouperO |> 
  filter(Common == "Graysby")

df_red_O = dft_widegrouperO |>
  filter(Common == "Red Hind")

df_yellow_A = dft_widesnapperA |>
  filter(Common == "Yellowtail")

df_school_A = dft_widesnapperA |>
  filter(Common == "Schoolmaster")

df_yellow_O = dft_widesnapperO |>
  filter(Common == "Yellowtail")

df_school_O = dft_widesnapperO |>
  filter(Common == "Schoolmaster")

```

## Groupers

### Abundance

#### Graysby

##### % Cover

For percent cover of benthic functional groups I first checkef for the use of site as a random factor. Site was not a better model and then I had to remove one of the benthic categories because of collinearity. In the end for Graysbys only SAND was relevant.

```{r - cover seascape metrics model}
#| echo: TRUE
#| include: TRUE

grayA11 = glmmTMB(MaxN ~ coral + sand + algae  + sponge + (1 | Site), family = poisson(), data = df_gray_A)
grayA12 = glmmTMB(MaxN ~ coral + sand + algae  + sponge, family = poisson(), data = df_gray_A)
AICc(grayA11, grayA12)


grayA1 = glmmTMB(MaxN ~ coral + sand + algae  + sponge, family = poisson(), data = df_gray_A)
check_collinearity(grayA1)
grayA1 = glmmTMB(MaxN ~ coral + sand + algae, family = poisson(), data = df_gray_A)
check_model(grayA1)



options(na.action = "na.fail") # Set na.action to fail for dredge
dr_invT = dredge(grayA1) |> 
  filter(delta < 4)

top = which.min(dr_invT$df)

top_invT = get.models(dr_invT, subset = top)[[1]]

summary(top_invT)

grayA1 = glmmTMB(MaxN ~ sand, family = poisson(), data = df_gray_A) #only good one


```

##### Landscape metrics

I did the same thing testing site as a random factor. Again did not improve model so I removed it. None of the landscape metrics were relevant.

```{r - cover seascape metrics model pland}
#| echo: TRUE
#| include: TRUE

grayA21 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass + (1|Site), data = df_gray_A, family = poisson())
grayA22 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass, data = df_gray_A, family = poisson())

AICc(grayA21, grayA22)


grayA2 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass, data = df_gray_A, family = poisson())
check_model(grayA2) # Model diagnostics, looks okayish


dr_invT = dredge(grayA2) |> 
  filter(delta < 4)

top = which.min(dr_invT$df)

top_invT = get.models(dr_invT, subset = top)[[1]]

summary(top_invT)#None

```

##### Distances

Again site did not improve the model. I scaled all the variables to help with convergence. Then i removed a variable due to collinearity. The top model only had distance to mangroves.

```{r - distances}
#| echo: TRUE
#| include: TRUE

grayA31 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) + (1|Site), data = df_gray_A, family = poisson())
grayA32 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) , data = df_gray_A, family = poisson())

AICc(grayA31, grayA32)

grayA3 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang), data = df_gray_A, family = poisson())

check_model(grayA3) # Model diagnostics, looks okayish
check_collinearity(grayA3)

grayA3 = glmmTMB(MaxN ~ scale(mang)  + scale(land), data = df_gray_A, family = poisson())
check_model(grayA3) # Model diagnostics, looks okayish
check_collinearity(grayA3)

dr_invT = dredge(grayA3) |> 
  filter(delta < 4)

top = which.min(dr_invT$df)

top_invT = get.models(dr_invT, subset = top)[[1]]

summary(top_invT)

#using mangroves only 
```

##### Rugosity

did the same with site as a random factor. It did not improve the model so I removed it. Only Avg_rugosity was relevant.

```{r - rugosity}
#| echo: TRUE
#| include: TRUE

grayA41 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location + (1|Site), data = df_gray_A, family = poisson())
grayA42 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location + (1|Site), data = df_gray_A, family = nbinom2())
grayA43 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location , data = df_gray_A, family = poisson())
grayA44 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location , data = df_gray_A, family = nbinom2())
AICc(grayA41, grayA42, grayA43, grayA44)

grayA4 = glmmTMB(MaxN ~ Avg_rugosity + + Rugosity_variance + Location, data = df_gray_A, family = poisson())

check_model(grayA4) 

#, rank = "AIC"
dr_invT = dredge(grayA4) |> 
  filter(delta < 4)

top = which.min(dr_invT$df)

top_invT = get.models(dr_invT, subset = top)[[1]]

summary(top_invT)

```

##### Global Model

One again checked for site as a random factor. It did not improve the model so I removed it. The top model had sand, mangroves and rugosity.

```{r - global model}
#| echo: TRUE
#| include: TRUE

grayAF1 = glmmTMB(MaxN ~ sand + mang + Avg_rugosity + (1|Site), data = df_gray_A, family = poisson())
grayAF2 = glmmTMB(MaxN ~ sand + mang + Avg_rugosity + (1|Site), data = df_gray_A, family = nbinom2())
grayAF3 = glmmTMB(MaxN ~ sand + mang + Avg_rugosity + (1|Site), data = df_gray_A, family = nbinom1())
grayAF4 = glmmTMB(MaxN ~ sand + mang + Avg_rugosity , data = df_gray_A, family = poisson())
grayAF5 = glmmTMB(MaxN ~ sand + mang + Avg_rugosity , data = df_gray_A, family = nbinom2())
grayAF6 = glmmTMB(MaxN ~ sand + mang + Avg_rugosity , data = df_gray_A, family = nbinom1())

AICc(grayAF1, grayAF2, grayAF3, grayAF4, grayAF5, grayAF6)

check_model(grayAF5) # Model diagnostics, looks okayish
summary(grayAF5) # Model coefficients

grayAF5 = glmmTMB(MaxN ~ sand + mang + Avg_rugosity , data = df_gray_A, family = nbinom2())
check_model(grayAF5)
summary(grayAF5) 

```

##### Predictions

```{r - gray abundance pred}
#| echo: FALSE
#| include: TRUE

grayA_sandpreds = ggpredict(grayAF5, terms = c("sand [0:50 by = 1]")) |> 
  rename(sand = x, MaxN = predicted)
  
grayA_mangpreds = ggpredict(grayAF5, terms = c("mang [0:500 by = 1]")) |>
  rename(mang = x, MaxN = predicted)
  
grayA_rugopreds = ggpredict(grayAF5, terms = c("Avg_rugosity [1:2.5 by = 0.05]")) |>
  rename(Rugosity = x, MaxN = predicted)
  
gray_sand_pred = ggplot(grayA_sandpreds, aes(x = sand, y = MaxN)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#66C2A5", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Graysby Abundance (MaxN) by % Sand Cover",
       x = "% Sand Cover",
       y = "MaxN")
gray_mang_pred = ggplot(grayA_mangpreds, aes(x = mang, y = MaxN)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill =
 "#66C2A5", alpha = 0.3) +
  geom_line( linewidth = 1) +
  theme_classic() +
  labs(title = "Predicted Graysby Abundance (MaxN) by Distance to
 Mangroves",
       x = "Distance to Mangroves (m)",
       y = "MaxN")
gray_rugo_pred = ggplot(grayA_rugopreds, aes(x = Rugosity
, y = MaxN)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#66C2A5", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Graysby Abundance (MaxN) by Rugosity",
       x = "Rugosity",
       y = "MaxN")

ggarrange(gray_sand_pred, gray_mang_pred, gray_rugo_pred,
          labels = c('a)', 'b)', 'c)'),
          ncol = 3, vjust = 1, align = "v")

  
  
```

#### Red Hind

##### % Cover

Same process for red hind. Site was not relevant as a random factor. Had to remove algae due to collinearity. No benthic category was relevant.
```{r - cover seascape metrics model red hind}
#| echo: TRUE
#| include: TRUE

redA11 = glmmTMB(MaxN ~ coral + sand + algae  + sponge + (1 | Site), family = poisson(), data = df_red_A)
redA12 = glmmTMB(MaxN ~ coral + sand + algae  + sponge, family = poisson(), data = df_red_A)

AICc(redA11, redA12)
check_model(redA12)

redA1 = glmmTMB(MaxN ~ coral + sand  + sponge, family = poisson(), data = df_red_A)
check_model(redA1)

options(na.action = "na.fail") # Set na.action to fail for dredge
dr_invT = dredge(redA1) |>
  filter(delta < 4)

top = which.min(dr_invT$df)

top_invT = get.models(dr_invT, subset = top)[[1]]

summary(top_invT) 

```

##### Landscape metrics

None were relevant here either

```{r - cover seascape metrics model pland red hind}
#| echo: TRUE
#| include: TRUE

redA21 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass + (1|Site), data = df_red_A, family = poisson())

redA22 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock +
 pland_Seagrass, data = df_red_A, family = poisson())

AICc(redA21, redA22)

redA2 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass, data = df_red_A, family = poisson())

check_model(redA2) 

dr_invT = dredge(redA2) |>
  filter(delta < 4)

top = which.min(dr_invT$df)

top_invT = get.models(dr_invT, subset = top)[[1]]

summary(top_invT)#None

```

##### Distances

Nothing was relevant

```{r - distances red hind}
#| echo: TRUE
#| include: TRUE

redA31 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) + (1|Site), data = df_red_A, family = poisson())

redA32 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) , data = df_red_A, family = poisson())

AICc(redA31, redA32)

redA3 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang), data = df_red_A, family = poisson())

check_model(redA3) 

check_collinearity(redA3)

redA3 = glmmTMB(MaxN ~ scale(mpa_distance), data = df_red_A, family = poisson())

check_model(redA3) 


dr_invT = dredge(redA3) |>
  filter(delta < 4)

top = which.min(dr_invT$df)

top_invT = get.models(dr_invT, subset = top)[[1]]

summary(top_invT)#none
```

##### Rugosity

Nothing was relevant here either

```{r - rugosity red hind}
#| echo: TRUE
#| include: TRUE

redA41 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location + (1|Site), data = df_red_A, family = poisson())

redA42 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location + (1|Site), data = df_red_A, family = nbinom2())

redA43 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location , data = df_red_A, family = poisson())

redA44 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location , data = df_red_A, family = nbinom2())

AICc(redA41, redA42, redA43, redA44)

redA4 = glmmTMB(MaxN ~ Avg_rugosity +  Rugosity_variance + Location, data = df_red_A, family = poisson())

check_model(redA4)
#, rank = "AIC"
dr_invT = dredge(redA4) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)

```

##### Global Model

```{r - global model red hind}
#| echo: TRUE
#| include: TRUE

#none
```

##### Predictions

```{r - red abundance pred}
#| echo: FALSE
#| include: TRUE
# No significant predictors
```

### Occurrence

#### Graysby

##### % Cover

Same workflow. Site did not improve anything.

No benthic category improved model

```{r - cover seascape metrics model gray occurrence}
#| echo: TRUE
#| include: TRUE

grayO11 = glmmTMB(PA ~ coral + sand + algae  + sponge + (1 | Site), family = binomial, data = df_gray_O)
grayO12 = glmmTMB(PA ~ coral + sand + algae  + sponge, family = binomial, data = df_gray_O)

AICc(grayO11, grayO12)

check_model(grayO12)

grayO1 = glmmTMB(PA ~ coral + sand  + sponge, family = binomial, data = df_gray_O)

check_model(grayO1)

options(na.action = "na.fail") # Set na.action to fail for dredge
dr_invT = dredge(grayO1) |>
  filter(delta < 4)

top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)

#none
```

##### Landscape metrics

Only pland_SandwithScatteredCoralandRock improved model

```{r - cover seascape metrics model pland gray occurrence}
#| echo: TRUE
#| include: TRUE
grayO21 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass + (1|Site), data = df_gray_O, family = binomial())
grayO22 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock +
 pland_Seagrass, data = df_gray_O, family = binomial())

AICc(grayO21, grayO22)

check_model(grayO22)

grayO2 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock +
 pland_Seagrass, data = df_gray_O, family = binomial())
check_model(grayO2)

dr_invT = dredge(grayO2) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)#pland_SandwithScatteredCoralandRock
```

##### Distances

None were relevant here

```{r - distances gray occurrence}
#| echo: TRUE
#| include: TRUE
grayO31 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) + (1|Site), data = df_gray_O, family = binomial())

grayO32 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) , data = df_gray_O, family = binomial())

AICc(grayO31, grayO32)

grayO3 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang), data = df_gray_O, family = binomial())

check_model(grayO3)

check_collinearity(grayO3)

grayO3 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land), data = df_gray_O, family = binomial())

check_model(grayO3)
check_collinearity(grayO3)

dr_invT = dredge(grayO3) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none

```

##### Rugosity

Avg_rugosity was a good model fit

```{r - rugosity gray occurrence}
#| echo: TRUE
#| include: TRUE
grayO41 = glmmTMB(PA ~ Avg_rugosity + Rugosity_variance + Location + (1|Site), data = df_gray_O, family = binomial())
grayO42 = glmmTMB(PA ~ Avg_rugosity + Rugosity_variance + Location , data = df_gray_O, family = binomial())

AICc(grayO41, grayO42)

grayO4 = glmmTMB(PA ~ Avg_rugosity + + Rugosity_variance + Location, data = df_gray_O, family = binomial())
check_model(grayO4)
#, rank = "AIC"
dr_invT = dredge(grayO4) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#Avg_rugosity 

```

##### Global Model

```{r - global model gray occurrence}
#| echo: TRUE
#| include: TRUE

grayOF1 = glmmTMB(PA ~ pland_SandwithScatteredCoralandRock + Avg_rugosity, data = df_gray_O, family = binomial())

check_model(grayOF1) # Model diagnostics, looks okayish

summary(grayOF1) # Model coefficients

```

##### Predictions

```{r - gray occurrence pred}

#| echo: FALSE
#| include: TRUE

grayO_plandpreds = ggpredict(grayOF1, terms = c("pland_SandwithScatteredCoralandRock [0:50 by = 1]")) |> 
  rename(pland_SandwithScatteredCoralandRock = x, Occurrence = predicted)
grayO_rugopreds = ggpredict(grayOF1, terms = c("Avg_rugosity [1:2.5 by = 0.05]")) |>
  rename(Rugosity = x, Occurrence = predicted)
  
gray_pland_pred = ggplot(grayO_plandpreds, aes(x = pland_SandwithScatteredCoralandRock, y = Occurrence)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill =
 "#66C2A5", alpha = 0.3) +
  geom_line( linewidth = 1) +
  theme_classic() +
  labs(title = "Predicted Graysby Occurrence by % Sand with Scattered Coral
       and Rock Cover",
       x = "% Sand with Scattered Coral and Rock Cover",
       y = "Occurrence")
       
gray_rugo_pred = ggplot(grayO_rugopreds, aes(x = Rugosity, y = Occurrence)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#66C2A5", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Graysby Occurrence by Rugosity",
       x = "Rugosity",
       y = "Occurrence")

ggarrange(gray_pland_pred, gray_rugo_pred,
          labels = c('a)', 'b)'),
          ncol = 2, vjust = 1, align = "v")
          
```

#### Red Hind

##### % Cover

Again site was not relevant as a random factor. Had to remove algae due to collinearity. No benthic category was relevant.

```{r - cover seascape metrics model red hind occurrence}
#| echo: TRUE
#| include: TRUE

redO11 = glmmTMB(PA ~ coral + sand + algae  + sponge + (1 | Site), family = binomial, data = df_red_O)
redO12 = glmmTMB(PA ~ coral + sand + algae  + sponge, family = binomial, data = df_red_O)

AICc(redO11, redO12)  
check_model(redO12)

redO1 = glmmTMB(PA ~ coral + sand  + sponge, family = binomial, data = df_red_O)
check_model(redO1)

options(na.action = "na.fail") # Set na.action to fail for dredge
dr_invT = dredge(redO1) |>
  filter(delta < 4)
  
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none

```

##### Landscape metrics

Again none were relevant

```{r - cover seascape metrics model pland red hind occurrence}
#| echo: TRUE
#| include: TRUE
redO21 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass + (1|Site), data = df_red_O, family = binomial())
redO22 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock +
 pland_Seagrass, data = df_red_O, family = binomial())

AICc(redO21, redO22)

check_model(redO22)

redO2 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock +
 pland_Seagrass, data = df_red_O, family = binomial())

dr_invT = dredge(redO2) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none
```

##### Distances

Again none were relevant

```{r - distances red hind occurrence}

#| echo: TRUE
#| include: TRUE
redO31 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) + (1|Site), data = df_red_O, family = binomial())

redO32 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) , data = df_red_O, family = binomial()) 

AICc(redO31, redO32)

redO3 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang), data = df_red_O, family = binomial())
check_model(redO3)
check_collinearity(redO3)

redO3 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land), data = df_red_O, family = binomial())
check_model(redO3)
check_collinearity(redO3)

dr_invT = dredge(redO3) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)#none

```

##### Rugosity

Non relevant

```{r - rugosity red hind occurrence}
#| echo: TRUE
#| include: TRUE

redO41 = glmmTMB(PA ~ Avg_rugosity + Rugosity_variance + Location + (1|Site), data = df_red_O, family = binomial())
redO42 = glmmTMB(PA ~ Avg_rugosity + Rugosity_variance + Location , data = df_red_O, family = binomial())

AICc(redO41, redO42)

redO4 = glmmTMB(PA ~ Avg_rugosity + + Rugosity_variance + Location, data = df_red_O, family = binomial())
check_model(redO4)
#, rank = "AIC"
dr_invT = dredge(redO4) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none
```

##### Global Model

```{r - global model red hind occurrence}
#| echo: TRUE
#| include: TRUE
#none
```

##### Predictions

```{r - red hind occurrence pred}
#| echo: FALSE
#| include: TRUE

# No significant predictors
```

## Snappers

Snappers were different as in some site was good for the model

### Abundance

#### Yellowtail

##### % Cover

Sponge and site as a random factor improve model 

```{r - cover seascape metrics model yellowtail}

#| echo: TRUE
#| include: TRUE

yellowA11 = glmmTMB(MaxN ~ coral + sand + algae  + sponge + (1 | Site), family = poisson(), data = df_yellow_A)
yellowA12 = glmmTMB(MaxN ~ coral + sand + algae  + sponge, family = poisson(), data = df_yellow_A)  

AICc(yellowA11, yellowA12)
check_model(yellowA11)

yellowA1 = glmmTMB(MaxN ~ coral + sand  + sponge + (1 | Site), family = poisson(), data = df_yellow_A)
check_model(yellowA1)

options(na.action = "na.fail") # Set na.action to fail for dredge
dr_invT = dredge(yellowA1) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#sponge
```

##### Landscape metrics

Site was included and pland_AggregateReef

```{r - cover seascape metrics model pland yellowtail}
#| echo: TRUE
#| include: TRUE

yellowA21 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass + (1|Site), data = df_yellow_A, family = poisson())
 
yellowA22 = glmmTMB(MaxN ~ pland_AggregateReef +  pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass, data = df_yellow_A, family = poisson()) 
 
AICc(yellowA21, yellowA22)
check_model(yellowA21)

yellowA2 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock +
 pland_Seagrass + (1 | Site), data = df_yellow_A, family = poisson())

check_model(yellowA2)

dr_invT = dredge(yellowA2) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#pland_AggregateReef 
```

##### Distances

Only site as a random factor and distance to land was helpfil

```{r - distances yellowtail}
#| echo: TRUE
#| include: TRUE

yellowA31 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) + (1|Site), data = df_yellow_A, family = poisson())
yellowA32 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) , data = df_yellow_A, family = poisson())

AICc(yellowA31, yellowA32)

yellowA3 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) + (1|Site), data = df_yellow_A, family = poisson())

check_model(yellowA3)
check_collinearity(yellowA3)

yellowA3 = glmmTMB(MaxN ~ scale(mang)  + scale(land), data = df_yellow_A, family = poisson())
check_model(yellowA3)

dr_invT = dredge(yellowA3) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)

#land

```

##### Rugosity

Sadly none were a better fit except for site

```{r - rugosity yellowtail}
#| echo: TRUE
#| include: TRUE

yellowA41 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location + (1|Site), data = df_yellow_A, family = poisson())
yellowA42 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location , data = df_yellow_A, family = poisson())

AICc(yellowA41, yellowA42)

yellowA4 = glmmTMB(MaxN ~ Avg_rugosity + + Rugosity_variance + Location + (1|Site), data = df_yellow_A, family = poisson())
check_model(yellowA4)
#, rank = "AIC"
dr_invT = dredge(yellowA4) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none

```

##### Global Model

```{r - global model yellowtail}
#| echo: TRUE
#| include: TRUE
 
yellowAF1 = glmmTMB(MaxN ~ sponge + pland_AggregateReef + scale(land), data = df_yellow_A, family = poisson())
yellowAF2 = glmmTMB(MaxN ~ sponge + pland_AggregateReef + scale(land) + (1|Site), data = df_yellow_A, family = poisson())
AICc(yellowAF1, yellowAF2)

check_model(yellowAF2) # Model diagnostics, looks okayish
summary(yellowAF2) # Model coefficients

```

##### Predictions

```{r - yellow abundance pred}
#| echo: FALSE
#| include: TRUE

yellowA_spongepreds = ggpredict(yellowAF2, terms = c("sponge [0:50 by = 1]")) |> 
  rename(sponge = x, MaxN = predicted)
    
yellowA_plandpreds = ggpredict(yellowAF2, terms = c("pland_AggregateReef [0:50 by = 1]")) |> 
  rename(pland_AggregateReef = x, MaxN = predicted)
  
yellowA_landpreds = ggpredict(yellowAF2, terms = c("land[0:500 by = 1]")) |>
  rename(land = x, MaxN = predicted)
  
yellow_sponge_pred = ggplot(yellowA_spongepreds, aes(x = sponge, y = MaxN)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill ="#FC8D62", alpha = 0.3) +
  geom_line( linewidth = 1) +
  theme_classic() +
  labs(title = "Predicted Yellowtail Abundance (MaxN) by % Sponge Cover",
       x = "% Sponge Cover",
       y = "MaxN")
       
yellow_pland_pred = ggplot(yellowA_plandpreds, aes(x = pland_AggregateReef, y = MaxN)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#FC8D62", alpha = 0.3) +
  geom_line( linewidth = 1) +
  theme_classic() +
  labs(title = "Predicted Yellowtail Abundance (MaxN) by % Aggregate Reef Cover",
       x = "% Aggregate Reef Cover",
       y = "MaxN")
       
yellow_land_pred = ggplot(yellowA_landpreds, aes(x = land, y = MaxN)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#FC8D62", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Yellowtail Abundance (MaxN) by Distance to Land",
       x = "Distance to Land (m)",
       y = "MaxN")
       
ggarrange(yellow_sponge_pred, yellow_pland_pred, yellow_land_pred,
          labels = c('a)', 'b)', 'c)'),
          ncol = 3, vjust = 1, align = "v")
          


```

#### Schoolmaster

##### % Cover
Same process for schoolmaster. Site though WAS NOT relevant as a random factor. Had to remove algae due to collinearity. No benthic category was relevant.
```{r - cover seascape metrics model schoolmaster}
#| echo: TRUE
#| include: TRUE
 
schoolA11 = glmmTMB(MaxN ~ coral + sand + algae  + sponge + (1 | Site), family = poisson(), data = df_school_A)
schoolA12 = glmmTMB(MaxN ~ coral + sand + algae  + sponge, family = poisson(), data = df_school_A)
AICc(schoolA11, schoolA12)

check_model(schoolA12)

schoolA1 = glmmTMB(MaxN ~ coral + sand  + sponge, family = poisson(), data = df_school_A)
check_model(schoolA1)

options(na.action = "na.fail") # Set na.action to fail for dredge
dr_invT = dredge(schoolA1) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none
```

##### Landscape metrics

again none were relevant

```{r - cover seascape metrics model pland schoolmaster}
#| echo: TRUE
#| include: TRUE
 
schoolA21 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass + (1|Site), data = df_school_A, family = poisson())
schoolA22 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass, data = df_school_A, family = poisson())

AICc(schoolA21, schoolA22)

#check_model(schoolA22)

schoolA2 = glmmTMB(MaxN ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass, data = df_school_A, family = poisson())

check_model(schoolA2)

dr_invT = dredge(schoolA2) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)

#none
```

##### Distances

again none were relevant

```{r - distances schoolmaster}
#| echo: TRUE
#| include: TRUE
 
schoolA31 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) + (1|Site), data = df_school_A, family = poisson())
schoolA32 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) , data = df_school_A, family = poisson())

AICc(schoolA31, schoolA32)

schoolA3 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang), data = df_school_A, family = poisson())

check_model(schoolA3)
check_collinearity(schoolA3)

schoolA3 = glmmTMB(MaxN ~ scale(mpa_distance)  + scale(land), data = df_school_A, family = poisson())
check_model(schoolA3)
check_collinearity(schoolA3)

dr_invT = dredge(schoolA3) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none
```

##### Rugosity

In this case VARIANCE of rugosity was important

```{r - rugosity schoolmaster}
#| echo: TRUE
#| include: TRUE
schoolA41 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location + (1|Site), data = df_school_A, family = poisson())

schoolA42 = glmmTMB(MaxN ~ Avg_rugosity + Rugosity_variance + Location , data = df_school_A, family = poisson())

AICc(schoolA41, schoolA42)

schoolA4 = glmmTMB(MaxN ~ Avg_rugosity + + Rugosity_variance + Location, data = df_school_A, family = poisson())
check_model(schoolA4)
#, rank = "AIC"
dr_invT = dredge(schoolA4) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#Rugosity_variance
```

##### Global Model

Not the best fitting model

```{r - global model schoolmaster}
#| echo: TRUE
#| include: TRUE
 
schoolAF1 = glmmTMB(MaxN ~ Rugosity_variance, data = df_school_A, family = poisson())
check_model(schoolAF1) # Model diagnostics, looks okayish
summary(schoolAF1) # Model coefficients

```

##### Predictions

```{r - schoolmaster abundance pred}
#| echo: FALSE
#| include: TRUE
  
schoolA_rugopreds = ggpredict(schoolAF1, terms = c("Rugosity_variance [0:0.5 by = 0.01]")) |>
  rename(Rugosity_variance = x, MaxN = predicted)
   
school_rugo_pred = ggplot(schoolA_rugopreds, aes(x = Rugosity_variance, y = MaxN)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#FC8D62", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Schoolmaster Abundance (MaxN) by Rugosity Variance",
       x = "Rugosity Variance",
       y = "MaxN")
school_rugo_pred

```

### Occurrence

#### Yellowtail

##### % Cover

again none were relevant

```{r - cover seascape metrics model yellowtail occurrence}
#| echo: TRUE
#| include: TRUE

yellowO11 = glmmTMB(PA ~ coral + sand + algae  + sponge + (1 | Site), family = binomial, data = df_yellow_O)
yellowO12 = glmmTMB(PA ~ coral + sand + algae  + sponge, family = binomial, data = df_yellow_O)

AICc(yellowO11, yellowO12)

check_model(yellowO12)

yellowO1 = glmmTMB(PA ~ coral + sand  + sponge, family = binomial, data = df_yellow_O)

check_model(yellowO1)

options(na.action = "na.fail") # Set na.action to fail for dredge
dr_invT = dredge(yellowO1) |>
  filter(delta < 4)

top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]

summary(top_invT)
#none
```

##### Landscape metrics

again none were relevant

```{r - cover seascape metrics model pland yellowtail occurrence}
#| echo: TRUE
#| include: TRUE

yellowO21 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass + (1|Site), data = df_yellow_O, family = binomial()) 
yellowO22 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass, data = df_yellow_O, family = binomial())

AICc(yellowO21, yellowO22)
check_model(yellowO22)

yellowO2 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock +
 pland_Seagrass, data = df_yellow_O, family = binomial())

check_model(yellowO2)
check_collinearity(yellowO2)

dr_invT = dredge(yellowO2) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none
```

##### Distances

again none were relevant

```{r - distances yellowtail occurrence}
#| echo: TRUE
#| include: TRUE
yellowO31 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) + (1|Site), data = df_yellow_O, family = binomial(),
  control = glmmTMBControl(
    optimizer = optim,
    optArgs   = list(method = "BFGS")   # goes here
  )) 

yellowO32 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) , data = df_yellow_O, family = binomial(),
  control = glmmTMBControl(
    optimizer = optim,
    optArgs   = list(method = "BFGS")   # goes here
  ))  

AICc(yellowO31, yellowO32)

yellowO3 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang), data = df_yellow_O, family = binomial(),
  control = glmmTMBControl(
    optimizer = optim,
    optArgs   = list(method = "BFGS")   # goes here
  ))

check_model(yellowO3)
check_collinearity(yellowO3)

yellowO3 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land), data = df_yellow_O, family = binomial(),
  control = glmmTMBControl(
    optimizer = optim,
    optArgs   = list(method = "BFGS")   # goes here
  ))

check_model(yellowO3)
check_collinearity(yellowO3)

dr_invT = dredge(yellowO3) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none
```

##### Rugosity

again none were relevant

```{r - rugosity yellowtail occurrence}
#| echo: TRUE
#| include: TRUE

yellowO41 <- glmmTMB(
  PA ~ scale(Avg_rugosity) + scale(Rugosity_variance) + Location + (1|Site),
  data   = df_yellow_O,
  family = binomial(),
  control = glmmTMBControl(
    optimizer = optim,
    optArgs   = list(method = "BFGS")   # goes here
  )
) 

yellowO42 = glmmTMB(PA ~ Avg_rugosity + Rugosity_variance + Location , data = df_yellow_O, family = binomial(),
  control = glmmTMBControl(
    optimizer = optim,
    optArgs   = list(method = "BFGS")   # goes here
  ))

AICc(yellowO41, yellowO42)

yellowO4 = glmmTMB(PA ~ Avg_rugosity + + Rugosity_variance + Location, data = df_yellow_O, family = binomial(),
  control = glmmTMBControl(
    optimizer = optim,
    optArgs   = list(method = "BFGS")   # goes here
  ))
check_model(yellowO4)
#, rank = "AIC"
dr_invT = dredge(yellowO4) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#none
```

##### Global Model

```{r - global model yellowtail occurrence}
#| echo: TRUE
#| include: TRUE
#none
```

##### Predictions

```{r - yellowtail occurrence pred}
#| echo: FALSE
#| include: TRUE
# No significant predictors
```

#### Schoolmaster

##### % Cover

ONLY SAND

```{r - cover seascape metrics model schoolmaster occurrence}
#| echo: TRUE
#| include: TRUE

schoolO11 = glmmTMB(PA ~ coral + sand + algae  + sponge + (1 | Site), family = binomial, data = df_school_O)
schoolO12 = glmmTMB(PA ~ coral + sand + algae  + sponge, family = binomial, data = df_school_O)

AICc(schoolO11, schoolO12)
check_model(schoolO12)

schoolO1 = glmmTMB(PA ~ coral + sand  + sponge, family = binomial, data = df_school_O)
check_model(schoolO1)

options(na.action = "na.fail") # Set na.action to fail for dredge
dr_invT = dredge(schoolO1) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#sand
```

##### Landscape metrics

ONLY RANDOM FACTOR

```{r - cover seascape metrics model pland schoolmaster occurrence}
#| echo: TRUE
#| include: TRUE

schoolO21 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass + (1|Site), data = df_school_O, family = binomial())
schoolO22 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock + pland_Seagrass, data = df_school_O, family = binomial())

AICc(schoolO21, schoolO22)
check_model(schoolO21)

schoolO2 = glmmTMB(PA ~ pland_AggregateReef + pland_AggregatedPatchReefs + pland_SandwithScatteredCoralandRock +
 pland_Seagrass + (1|Site), data = df_school_O, family = binomial())
check_model(schoolO2)
check_collinearity(schoolO2)

dr_invT = dredge(schoolO2) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#1|Site
```

##### Distances

DISTANCE TO MPA...WHICH IS COOL

```{r - distances schoolmaster occurrence}
#| echo: TRUE
#| include: TRUE
schoolO31 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) + (1|Site), data = df_school_O, family = binomial())
schoolO32 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land)  +scale(inlet) + scale(mang) , data = df_school_O, family = binomial())

AICc(schoolO31, schoolO32)

schoolO3 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land) , data = df_school_O, family = binomial())  
check_model(schoolO3)
check_collinearity(schoolO3)
schoolO3 = glmmTMB(PA ~ scale(mpa_distance)  + scale(land), data = df_school_O, family = binomial())
check_model(schoolO3)

check_collinearity(schoolO3)

dr_invT = dredge(schoolO3) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)

#scale(mpa_distance)

```

##### Rugosity

AVG RUGOSITTY AND SITE

```{r - rugosity schoolmaster occurrence}
#| echo: TRUE
#| include: TRUE
schoolO41 = glmmTMB(PA ~ Avg_rugosity + Rugosity_variance + Location + (1|Site), data = df_school_O, family = binomial())
schoolO42 = glmmTMB(PA ~ Avg_rugosity + Rugosity_variance + Location , data = df_school_O, family = binomial())
AICc(schoolO41, schoolO42)
check_model(schoolO41)

schoolO4 = glmmTMB(PA ~ Avg_rugosity + + Rugosity_variance + Location + (1|Site), data = df_school_O, family = binomial())
check_model(schoolO4)
#, rank = "AIC"
dr_invT = dredge(schoolO4) |>
  filter(delta < 4)
top = which.min(dr_invT$df)
top_invT = get.models(dr_invT, subset = top)[[1]]
summary(top_invT)
#Avg_rugosity + (1|Site)
```

##### Global Model

AICc comparisons almost identical. So removed site as a random factor

```{r - global model schoolmaster occurrence}
#| echo: TRUE
#| include: TRUE

schoolOF1 = glmmTMB(PA ~ sand + scale(mpa_distance) + Avg_rugosity + (1|Site), data = df_school_O, family = binomial())
schoolOF2 = glmmTMB(PA ~ sand + scale(mpa_distance) + Avg_rugosity, data = df_school_O, family = binomial())
AICc(schoolOF1, schoolOF2)
check_model(schoolOF1) # Model diagnostics, looks okayish
summary(schoolOF2) # Model coefficients

```

##### Predictions

```{r - schoolmaster occurrence pred}
#| echo: FALSE
#| include: TRUE


schoolO_sandpreds = ggpredict(schoolOF2, terms = c("sand [0:50 by = 1]")) |> 
  rename(sand = x, Occurrence = predicted)
schoolO_distpreds = ggpredict(schoolOF2, terms = c("mpa_distance [0:500 by = 1]")) |> 
  rename(mpa_distance = x, Occurrence = predicted)
schoolO_rugopreds = ggpredict(schoolOF2, terms = c("Avg_rugosity [1:2.5 by = 0.05]")) |>
  rename(Avg_rugosity = x, Occurrence = predicted)
  
school_sand_pred = ggplot(schoolO_sandpreds, aes(x = sand, y = Occurrence)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#66C2A5", alpha = 0.3) +
  geom_line( linewidth = 1) +
  theme_classic() +
  labs(title = "Predicted Schoolmaster Occurrence by % Sand Cover",
       x = "% Sand Cover",
       y = "Occurrence")
       
school_dist_pred = ggplot(schoolO_distpreds, aes(x = mpa_distance, y = Occurrence)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#66C2A5", alpha = 0.3) +
  geom_line( linewidth = 1) +
  theme_classic() +
  labs(title = "Predicted Schoolmaster Occurrence by Distance to MPA Boundary",
       x = "Distance to MPA Boundary (m)",
       y = "Occurrence")
       
school_rugo_pred = ggplot(schoolO_rugopreds, aes(x = Avg_rugosity, y = Occurrence)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "#66C2A5", alpha = 0.3) +
  geom_line( linewidth = 1) +  
  theme_classic() +
  labs(title = "Predicted Schoolmaster Occurrence by Rugosity",
       x = "Rugosity",
       y = "Occurrence")
       
ggarrange(school_sand_pred, school_dist_pred, school_rugo_pred,
          labels = c('a)', 'b)', 'c)'),
          ncol = 3, vjust = 1, align = "v")


```
